[
  {
    "id": "creational",
    "title": "Creational",
    "color": "0xFFF3D250",
    "patterns": [
      {
        "id": "abstract-factory",
        "title": "Abstract Factory",
        "description": "Provide an interface for creating families of related or dependent objects without specifying their concrete classes."
      },
      {
        "id": "builder",
        "title": "Builder",
        "description": "Separate the construction of a complex object from its representation so that the same construction process can create different representations."
      },
      {
        "id": "factory-method",
        "title": "Factory Method",
        "description": "Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to sub­classes."
      },
      {
        "id": "prototype",
        "title": "Prototype",
        "description": "Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype."
      },
      {
        "id": "singleton",
        "title": "Singleton",
        "description": "Ensure a class only has one instance, and provide a global point of access to it."
      }
    ]
  },
  {
    "id": "structural",
    "title": "Structural",
    "color": "0xFF90CCF4",
    "patterns": [
      {
        "id": "adapter",
        "title": "Adapter",
        "description": "Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces."
      },
      {
        "id": "bridge",
        "title": "Bridge",
        "description": "Decouple an abstraction from its implementation so that the two can vary independently."
      },
      {
        "id": "composite",
        "title": "Composite",
        "description": "Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly."
      },
      {
        "id": "decorator",
        "title": "Decorator",
        "description": "Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality."
      },
      {
        "id": "facade",
        "title": "Facade",
        "description": "Provide an unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use."
      },
      {
        "id": "flyweight",
        "title": "Flyweight",
        "description": "Use sharing to support large numbers of fine-grained objects efficiently."
      },
      {
        "id": "proxy",
        "title": "Proxy",
        "description": "Provide a surrogate or placeholder for another object to control access to it."
      }
    ]
  },
  {
    "id": "behavioral",
    "title": "Behavioral",
    "color": "0xFFF78888",
    "patterns": [
      {
        "id": "chain-of-responsibility",
        "title": "Chain of Responsibility",
        "description": "Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it."
      },
      {
        "id": "command",
        "title": "Command",
        "description": "Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable opera­tions."
      },
      {
        "id": "interpreter",
        "title": "Interpreter",
        "description": "Given a language, define a representation for its grammar along with an inter­preter that uses the representation to interpret sentences in the language."
      },
      {
        "id": "iterator",
        "title": "Iterator",
        "description": "Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation."
      },
      {
        "id": "mediator",
        "title": "Mediator",
        "description": "Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently."
      },
      {
        "id": "memento",
        "title": "Memento",
        "description": "Without violating encapsulation, capture and externalize an object's internal state so that the object can be restored to this state later."
      },
      {
        "id": "observer",
        "title": "Observer",
        "description": "Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically."
      },
      {
        "id": "state",
        "title": "State",
        "description": "Allow an object to alter its behavior when its internal state changes. The object will appear to change its class."
      },
      {
        "id": "strategy",
        "title": "Strategy",
        "description": "Define a family of algorithms, encapsulate each one, and make them interchange­able. Strategy lets the algorithm vary independently from clients that use it."
      },
      {
        "id": "template-method",
        "title": "Template Method",
        "description": "Define the skeleton of an algorithm in an operation, deferring some steps to sub­classes. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure."
      },
      {
        "id": "visitor",
        "title": "Visitor",
        "description": "Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates."
      }
    ]
  }
]
